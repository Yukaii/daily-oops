{"pageProps":{"posts":[{"id":"MPNd7ZOZQqSQNIJdnMU1Bw","meta":{"layout":"post","title":"使用 Chrome NetLog 解析隱藏在 DevTools 中的 Header 資訊","date":"2019-03-02 21:30 +0800","slug":"chrome-netlog-and-netlog-viewer-hidden-header-credentials"},"title":"使用 Chrome NetLog 解析隱藏在 DevTools 中的 Header 資訊","content":"\n# 使用 Chrome NetLog 解析隱藏在 DevTools 中的 Header 資訊\n\n在檢視 DevTools 網路頁的 Headers 資訊時，有時後會顯示下面這行警告訊息：\n\n![](https://i.imgur.com/P7WZcYY.png)\n\n> Provisional headers are shown\n\n這就代表有些敏感資訊被 DevTools 隱藏。舉例來說，CloudFront 有一套 [基於 Signed Cookie 的驗證系統][1]，某些需要登入後才能存取的資源，比如 **電子書**、影音就需要用這種方式來防止外流。不過有做 DRM 還是比較好啦，畢竟沒 DRM 你的檔案還是跟裸奔一樣啊！😆\n\n## 該是 NetLog 登場的時刻\n\nNetLog 顧名思義，是一套 Chromium Project 內建的網路事件記錄系統 (Network Logging System)，因為我們需要拿取被 DevTools 隱藏的資訊，所以就要靠 NetLog 啦。有 Log 才能 Debug！\n\n1. 打開 [`chrome://net-export/`](chrome://net-export/)，你應該會看到以下的介面\n    ![](https://i.imgur.com/8qFazRw.png)\n2. 記得選擇第二項 **Include cookies and credentials**，這才是我們要的\n3. 點按鈕，選擇完 dump 位置後開始記錄網路事件。開始進行你要 Log 的操作，此時分頁開越少越好，輸出資料的雜訊不會那麼多比較好讀\n\n## 用 NetLog Viewer 來打開 dump 出的 log 檔\n\n那麼輸出的 JSON 檔要怎麼讀？Google 也幫你弄好了。\n\n1. 打開 [NetLog Viewer][2]\n2. 把剛剛輸出的 JSON 檔案，拖弋到視窗\n    ![](https://i.imgur.com/oJj7teQ.png)\n3. Bang!\n    ![](https://i.imgur.com/0K3spmz.png)\n4. 點開左側的 Event，搜尋框輸入你要找的東西就可以了\n    ![](https://i.imgur.com/pPYkL1f.png)\n5. 剩下來就不說啦，搜尋你要的 Request 或 Cookie 鍵值，拉出你要的資訊，就和使用 DevTools 一樣\n\n## 嗯\n\n所以說，你要解析的敏感資訊是什麼呢？\n\n光喜自得！\n\n[1]: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-setting-signed-cookie-custom-policy.html\n[2]: https://netlog-viewer.appspot.com","date":{"year":"2020","month":"10","day":"05"},"slug":"chrome-netlog-and-netlog-viewer-hidden-header-credentials"},{"id":"V4VMZx-oQBu5-svQ4Qulcg","meta":{},"title":"2020 年開發者向 Windows 10 設定指南","content":"# 2020 年開發者向 Windows 10 設定指南\n\n###### tags: `draft`\n\n從 2014 年中購入 Macbook Air 以來，我幾乎所有開發工作都在 macOS 下完成，macOS 的 Unix-like 環境還有生態圈、Homebrew 也都摸了很久，相當習慣了，我也常常把推坑蘋果教作為副業。不過從今年開始，我搞了台桌機，又把大部分的開發工作轉移回 Windows 上，為什麼呢？\n\n理由其一，這幾年下來，WSL (Windows Subsystem for Linux) 越來越成熟，[在今年 WSL 2 正式推出到 Windows 10 2004 版](https://docs.microsoft.com/zh-tw/windows/wsl/wsl2-index)，解決了一直以來為人詬病的 IO 存取速度問題。\n\n理由之二，我的 Macbook Air 慢慢跟不上現代的 JavaScript 開發需求，你也知道 `node_modules` 就是個黑洞，每次的 webpack build 對我來說都是折磨，Browser-based (electron) 的桌面應用程式一個一個裝，Slack、VSCode、Discord、\n\n\n- 轉換到 Windows 的理由\n- 使用 mac 的感覺\n- mac 硬體的轉變\n- 還是錢\n\n> 在大約三年前，我有寫過一篇「[Windows Unix-Like 環境設定踩坑紀錄](https://yukaii.tw/blog/2017/06/28/windows-unix-like-development-guide-nodejs-ruby/)」。\n\n## 介面改造 (Customizaation)\n\n\n## 開發工具、流程\n\n\n\n- Less is more （外觀上啦）\n- https://github.com/Awesome-Windows/Awesome\n- winget\n\n## Customization\n\n![](https://i.imgur.com/nV2SPLt.jpg)\n\n> ~~業配時間~~\n> Powered by [HackMD](https://hackmd.io)\n\n- ~~TranslacentTB~~ 功能已內建在 TaskbarX\n- [TaskbarX](https://github.com/ChrisAnd1998/TaskbarX) for centering taskbar icon\n- Unsplash\n- [AutoHotKey](https://github.com/Yukaii/ahk-scripts)\n- qttabbar\n- [Deskpins](https://efotinis.neocities.org/deskpins/) Pin window always on top\n- https://github.com/namazso/SecureUxTheme 也差不多該來裝主題了\n    - https://www.deviantart.com/niivu/art/Nord-Windows-10-Theme-837266272\n- KeyTweak: Remap 按鍵，不過現在 PowerToys 也有內建了\n- [SylphyHornEx](https://github.com/ViRb3/SylphyHornEx)\n\n```cmd\nshell:startup\n```\n\n## 常用功能\n\n- 截圖\n- Terminal\n\n## Devtools\n\n- Windows Terminal (iterm colors included)\n- WSL 2\n    - https://x410.dev/ X Server\n- VSCode\n- chocolately\n- scoop (nerd fonts, dev tools)\n- winget (最終會 migrate 到這裡吧)\n- https://github.com/starship/starship\n- https://github.com/IlanCosman/tide\n- https://github.com/darlinghq/darling (WSL2 也可以用了)\n- https://github.com/gerardog/gsudo (sudo for Windows)\n\n## Utilities\n\n- windirstat https://windirstat.net\n\n## Bugs\n\n### Bluetooth Lags\n\n:::spoiler :heavy_check_mark: 已換\n- https://answers.microsoft.com/en-us/windows/forum/all/bluetooth-mouse-freezing-solution/26f85c67-401c-4b0f-9a35-a652b2f8a197\n- https://windowsreport.com/mouse-lag-windows-10/\n- https://www.tenforums.com/drivers-hardware/109457-possible-cause-bluetooth-mouse-lag.html\n- https://visser.io/2016/04/fix-for-stuttering-lag-in-bluetooth-mouse-on-windows-10/\n\n應該是和 2.4Ghz wifi 衝到互相干擾。硬體層的解法應該就換一個支援 5GHz 的 wifi dongle 了...\n:::\n\n\n### WSL2\n\n:::spoiler ~~出不來啊乾~~ 需要幾次重開機，有時抓不到開出來的 port\n- https://github.com/microsoft/WSL/issues/4769\n:::\n\n\n## Guides\n\n- https://gist.github.com/cerebrate/d40c89d3fa89594e1b1538b2ce9d2720 (Recompile your WSL2 kernel - support for snaps, apparmor, lxc, etc.)\n- https://vi.stackexchange.com/a/15190 (WSL Vim clipboard, handy!)","date":{"year":"2020","month":"06","day":"02"},"slug":"2020-Windows-10"},{"id":"_XRydavzRKSk0RSJKMZAsg","meta":{},"title":"用 inlets 加上 caddy 實現窮人版的 https ngrok","content":"# 用 inlets 加上 caddy 實現窮人版的 https ngrok\n\n###### tags: `draft`\n\n> 我就客家\n\n\n## 準備一臺跑 Inlets 的伺服器\n\n看是用 GCP 還是 Linode，也可以用 inlets control 自動開機器。我這裡是用 gcp 的 always free tier\n\n\n##### `/etc/systemd/system/inlets.service`\n\n```ini\n[Unit]\nDescription=Inlets Server Service\nAfter=network.target\n\n[Service]\nType=simple\nRestart=always\nRestartSec=1\nStartLimitInterval=0\nEnvironmentFile=/etc/default/inlets\nExecStart=/usr/local/bin/inlets server --port=8000 --token=\"${AUTHTOKEN}\"\n\n[Install]\nWantedBy=multi-user.target\n```\n\n`echo 'export AUTHTOKEN=$(head -c 16 /dev/urandom | shasum | cut -d\" \" -f1)' > /etc/default/inlets`\n\n用下載 Caddy 的 deb 用 dpkg 安裝\n\n檢查一下有沒有 caddy service，若沒有照這個安裝：\n\nhttps://caddyserver.com/docs/install\n\n```bash\nsudo systemctl daemon-reload\nsudo systemctl enable inlets\nsudo systemctl start inlets\n```\n\n\n##### `/etc/caddy/Caddyfile`\n\n> Caddy v2 configuration\n\n```caddy\nbox.yukai.dev\nreverse_proxy localhost:8000\nreverse_proxy /tunnel localhost:8000\n```\n\n```\njournalctl -u inlets --follow\njournalctl -u caddy --follow\n```\n\n```bash\nsudo vim /etc/sudoers\n\n# caddy ALL=(ALL:ALL) NOPASSWD:ALL\n```\n\n```bash!\ninlets client --remote=wss://box.yukai.dev --upstream=http://localhost:3000 -t $TOKEN\n```\n\n\n### 補充：設定 Shell Function 讓使用起來方便\n\n```fish\nfunction tunnel --description \"ngrok alternative\"\n  set --local options 'p/port=!_validate_int' 'h/help'\n\n  argparse $options -- $argv\n\n  if set --query _flag_help; or not set -q _flag_port\n    printf \"Usage: tunnel [OPTIONS]\\n\\n\"\n    printf \"Options:\\n\"\n    printf \"  -p --port       Local port to bind\\n\"\n    return 0\n  end\n\n  eval \"inlets client --remote=wss://box.yukai.dev --upstream=http://localhost:$_flag_port -t $INLETS_AUTH_TOKEN\"\nend\n```\n\nconfig.fish\n\n```diff\n+ source $__fish_config_dir/secrets.fish\n```\n\n```fish\nset -x INLETS_AUTH_TOKEN asdfasdfasdfasdfasf\n```\n\n### 附錄\n\n再使用 GCP instance f1.micro always free，整套下來只需要買 domain (或也不需要)，更客家 :+1:\n\n\n### Reference\n\n- https://ksana410.github.io/2019/08/27/expose-your-local-endpoint-to-internet-with-inlets/\n- https://blog.alexellis.io/https-inlets-local-endpoints/\n- Alternatives: https://news.ycombinator.com/item?id=20410552\n- https://github.com/inlets/inletsctl 留言 provision 都要自動化，提一下 Pro 的自動 TLS\n- https://ianwu.tw/press/programming/tool/inlets.html#%E5%AE%89%E8%A3%9D%E6%96%B9%E5%BC%8F\n\n","date":{"year":"2020","month":"07","day":"03"},"slug":"inlets-free-ngrok-https-with-caddy"},{"id":"cUCdtWqYTPaOezdpjG_p4g","meta":{},"title":"Shopify 串接百雷","content":"# Shopify 串接百雷\n\n###### tags: `draft`\n\n- https://github.com/MONEI/Shopify-api-node e.response.body 錯誤要從 got Error 拿 = =\n- Storefront graphql 欄位和 admin api 不相容\n    - 請實際玩玩！\n    - https://shopify.dev/graphiql/storefront-graphiql\n    - https://shopify.dev/tools/graphiql-admin-api\n\nMetafield 來做資料儲存（但沒辦法 query 的）\n\n- https://community.shopify.com/c/Shopify-Discussion/Query-all-products-with-a-given-metafield-value/td-p/651540 (可撥)\n- https://community.shopify.com/c/Shopify-APIs-SDKs/Why-are-custom-fields-so-difficult-to-manage-in-Shopify/td-p/534484 （理由伯）\n","date":{"year":"2020","month":"07","day":"28"},"slug":"Shopify"},{"id":"VDUZHrLiSwqpYS4eg9PyAQ","meta":{},"title":"用 toxy 架設可程式化模擬各種網路情況的 http/s、websocket proxy","content":"# 用 toxy 架設可程式化模擬各種網路情況的 http/s、websocket proxy\n\n###### tags: `draft`\n\n```bash\nnpm install toxy\n```\n\n```javascript\nconst toxy = require('toxy')\n\nconst proxy = toxy()\nconst rules = toxy.rules\nconst poisons = toxy.poisons\n\nproxy\n  .forward('http://localhost:3000')\n\nproxy\n  .get('/build/MathJax/*')\n  .poison(poisons.slowOpen({ delay: 3 * 1000 }))\n  .poison(poisons.timeout(5000))\n  .withRule(rules.probability(50))\n\nproxy\n  .get('/*/download')\n  .poison(poisons.slowOpen({ delay: 2 * 1000 }))\n\nproxy\n  .all('/*')\n\nproxy\n  .protocol('ws')\n  .forward('ws://localhost:3000')\n\nproxy.listen(4000)\nconsole.log('Proxy server started')\n```\n\n## Alternatives\n\n- clumsy\n- network link conditioner\n","date":{"year":"2020","month":"07","day":"27"},"slug":"toxy-httpswebsocket-proxy"}]},"__N_SSG":true}