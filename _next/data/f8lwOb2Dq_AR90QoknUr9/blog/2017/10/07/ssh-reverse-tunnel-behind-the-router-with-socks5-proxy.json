{"pageProps":{"content":"\n# 用 ssh tunnel 連線到 router 背後的機器，並建立 SOCKS5 proxy 存取內網資源\n\n## 這役男實在是...\n\n記一下最近遇到的問題。\n\n目前小弟正在公家單位服役。凡公家機關，內部架個外包的管理系統也是很合理的，不過因為是內部系統，所以只能透過區網來存取。對於我這個用自己機器的人來說就不太方便啦，連線的 Wifi Router 又不能和內網相通。\n\n剛好單位有台閒置的虛擬機，也可以存取內網，Google 了幾個方案之後發現 ssh tunnel 的影響最小：不用裝些有的沒的，也不用更改網路環境，加上我已經有了台 Linode 上的遠端開發機常駐，就來試試吧 =w=\n\n以下是環境的簡易說明圖。「那臺機器」就是閒置的內網虛擬機，「開發機器」是常駐 Linode 的遠端開發機，「Client 機」是任一台可以連線到開發機的裝置，可能是 Macbook Air、iPad，或是路邊撿來裝上 putty 的 Windows（逃）\n\n```txt\n                          +\n                          |\n                          |\n                   ssh with reverse port\n+---------------+  forwarding            +---------------+\n|               +------------------------>               |\n|   那臺機器     <------------------------+    開發機器    <-----+ mosh + tmux\n|               |   ssh to localhost via |               |     |   掛上去\n|   (ubuntu)    |   forwarded port       |   (Linode)    |     |\n+---------------+         |              +---------------+     |\n                          |                                    +-------------+\n                          |                                    |             |\n                          |                                    |             |\n                          |                                    |  Client 機  |\n                          |                                    |             |\n                          |                                    |             |\n                          +                                    +-------------+\n\n                一堆 router 和防火牆等等\n\n```\n\n## ssh remote port forwarding\n\n先在 Ubuntu 上跑 ssh 指令連到遠端開發機，再加上 Remote port forwarding 參數：\n\n```bash\n# run on machine behind router\nssh -NfR 11111:localhost:22 REMOTE_SERVER_IP\n```\n\n可以看到 ssh 有三個參數，分別為：\n\n* `-N`: 單純連線，不送指令\n* `-f`: 放到背景執行\n* `-R`: Remote port forwarding，遠端埠重導\n\n上面指令的作用是，建立 ssh tunnel，讓遠端機器的 `11111` port 連回本機的 port 22 (localhost:22)。\n\n所以接下來在遠端機跑：\n\n```bash\n# run on remote machine\nssh localhost -p 11111\n```\n\n就可以 ssh 回 router 背後的機器啦。\n\n## SOCKS5 Proxy\n\n接下來我們修改一點指令，加上 dynamic port forwarding 參數 `-D`：\n\n```bash\n# run on remote machine\nssh -ND 0.0.0.0:8080 localhost -p 11111\n```\n\n另一個參數 `-N` 讓指令純建立 tunnel，`0.0.0.0` 讓所有 IP 都能連到這臺機器，`8080` 是綁定的 port。`-p` 指令連接埠，也就是方才 forward 過來的 `11111`。\n\n這樣 SOCKS5 Proxy 就算跑起來了，最後來設定 Client 端。我另外開了一個 Chrome 的 Profile，裝上 [Proxy SwitchyOmega][1] 插件，方便隔離：\n\n![image](https://i.imgur.com/kOjwrdw.png)\n\nRemote IP 就是遠端開發機的 IP。Bypass List 要檢查一下，`192.168.x.x` 也要 forward，記得從 List 刪掉。\n\n然後就可以在外網存取 `192.168.X.X` 的區網資源啦！太舒適啦！\n\n## 參考資料\n\n* [Accessing home services from anywhere, without port forwarding!][2] - 用 tinc 做 \bVPN，感覺\b更佳舒適\n* [ssh through a router without port forwarding][3] - SuperUser 日常爬文\n\n[1]: https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif\n[2]: https://jordancrawford.kiwi/home-server-without-portforward/\n[3]: https://superuser.com/questions/595989/ssh-through-a-router-without-port-forwarding\n","title":"用 ssh tunnel 連線到 router 背後的機器，並建立 SOCKS5 proxy 存取內網資源","params":{"year":"2017","month":"10","day":"07","slug":"ssh-reverse-tunnel-behind-the-router-with-socks5-proxy"},"disqus":{"shortname":"dailyoops","domain":"yukaii.tw"},"noteId":"EL7yoeEAQru61WrO_CAccQ"},"__N_SSG":true}