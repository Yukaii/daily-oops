{"pageProps":{"content":"\n# rbenv、fish 與 VSCode 設置之路\n\n在最新的 VSCode 1.3.1 版裡，Integrated Terminal 變得更加好用，但由於上游套件 `xterm.js` 的緣故，`zsh` 還是有無法捲動的問題。不過作為一個 Rails 開發者，VSCode 已經是個足夠好用的、足矣媲美 Sublime Text 的編輯器了。為了能夠在 VSCode 開發 Rails，特別對目前的開發環境做出調整。\n\n## 由 RVM 轉換至 rbenv\n\n聽聞 [rbenv][rbenv] 相較 rvm 來說，是對系統較為乾淨的 ruby 版本管理工具。就趁這次更新開發環境一起重置吧！\n\n### 移除 rvm\n\n套件也內建了一鍵移除的方式：\n\n```bash\nrvm implode\n```\n\n做完之後也可以將 rvm 剩餘的檔案移掉：\n\n```bash\nrm -rf ~/.rvm\n```\n\n### 安裝 rbenv\n\n參照了[專案官網][rbenv]的說明，只要把該 repo clone 下來，設置好 `PATH` 變數，在為 shell 加上一些設定便可以開始安裝 ruby 了。在 OS X 環境又更容易，只要用 Homebrew 一鍵安裝便成。\n\n```bash\nbrew install rbenv\n```\n\n裝完之後就可以發現 rbenv 已經被裝到 Homebrew 的可執行位置了，可以跑 `which` 指令檢驗\n\n```bash\nwhich rbenv\n# => /usr/local/bin/rbenv\n```\n\n在 Homebrew 安裝跑完之後，安裝腳本會提示已在 shell profile(.zshrc/.profile/.bash_profile) 加上 rbenv 初始化腳本，預設內容如下：\n\n```bash\nexport PATH=\"$HOME/.rbenv/bin:$PATH\"\neval \"$(rbenv init -)\"\n```\n\n第二行的 `rbenv init -` 指令輸出，在你一般開啟的 Terminal 會跑出：\n\n```bash\nexport PATH=\"/Users/USERNAME/.rbenv/shims:${PATH}\"\nexport RBENV_SHELL=zsh\nsource '/usr/local/Cellar/rbenv/1.0.0/libexec/../completions/rbenv.zsh'\n# ... 下面一串\n```\n\n不過在 VSCode 內建終端機卻會跑出：\n\n```bash\nexport PATH=\"/usr/local/opt/rbenv/shims:${PATH}\" # 就這行不同\nexport RBENV_SHELL=zsh\n\n# ... 下面一樣\n```\n\n大概是執行權限不同的關係吧，rbenv 執行的位置不同也會讓 `gem`/`bundler` 裝到不同的位置，為了方便起見，一律設成一般終端機跑出來的那串。把下面這串貼到 `~/.zshrc` 最下面就是。\n\n```bash\nexport PATH=\"/Users/USERNAME/.rbenv/shims:${PATH}\"\nexport RBENV_SHELL=zsh\nsource '/usr/local/Cellar/rbenv/1.0.0/libexec/../completions/rbenv.zsh'\ncommand rbenv rehash 2>/dev/null\nrbenv() {\n  local command\n  command=\"$1\"\n  if [ \"$#\" -gt 0 ]; then\n    shift\n  fi\n\n  case \"$command\" in\n  rehash|shell)\n    eval \"$(rbenv \"sh-$command\" \"$@\")\";;\n  *)\n    command rbenv \"$command\" \"$@\";;\n  esac\n}\n```\n\n若是 fish 就貼下面這個：\n\n```\nsetenv PATH '/Users/USERNAME/.rbenv/shims' $PATH\nsetenv RBENV_SHELL fish\n. '/usr/local/Cellar/rbenv/1.0.0/libexec/../completions/rbenv.fish'\ncommand rbenv rehash 2>/dev/null\nfunction rbenv\n  set command $argv[1]\n  set -e argv[1]\n\n  switch \"$command\"\n  case rehash shell\n    . (rbenv \"sh-$command\" $argv|psub)\n  case '*'\n    command rbenv \"$command\" $argv\n  end\nend\n```\n\n### 裝 ruby\n\n```bash\nrbenv install 2.3.1\nrbenv global 2.3.1\ngem install bundler\n\nbundle install\n```\n\n搞定！\n\n### Pow 的額外設定\n\n其實在 Pow 的 [wiki](https://github.com/basecamp/pow/wiki/Troubleshooting) 就有解答，不過因為我又對 rbenv 做了 PATH 的改動，所以設定也不太一樣。\n\n打開 ~/.powconfig 並貼入\n\n```bash\nexport PATH=\"/Users/USERNAME/.rbenv/shims:/Users/USERNAME/.rbenv/shims/bin:$PATH\"\n```\n\n然後重啟 pow service\n\n```bash\ntouch ~/.pow/restart.txt\n```\n\n## 將主要 shell 由 zsh 換成 fish\n\nzsh 有著非常有名的 [oh-my-zsh][oh-my-zsh] 設定檔管理框架，fish 底下也有個好用的叫 [fisherman][fisherman]。不過我終究是沒有把系統預設的 shell 換掉(`chsh` 指令)，因為挺多工具與 fish 不相容。\n\nfish 啟動速度飛快，帶我重回還沒有裝一堆 zsh 套件的美好往日時光。\n\n### VSCode\n\n講來講去這篇好像跟 VSCode 沒啥關係耶？那就附張截圖好了，VSCode 也是十分優秀的 Markdown 編輯器，內建了快速的 Preview，碼 code、寫文件、Terminal、Task Runner 全都內建了，還夠輕量快速，Extension 也陸續多了起來，還真不好挑剔啊 XD。\n\n![][screenshot1]\n\n\n[rbenv]: https://github.com/rbenv/rbenv\n[oh-my-zsh]: https://github.com/robbyrussell/oh-my-zsh\n[fisherman]: https://github.com/fisherman/fisherman\n[screenshot1]: https://lh3.googleusercontent.com/-o17HvZ1w7k6NzK0kw84uJNdhTmnWCH1hGyHduSokRnhgdeoaIh8reqDVrlAc43uGIN9K5KZYpujZuuSdqrV5BiuBhYNsQlubHEfAPut1pGvbkYzw3zKLfuEpphlj7JpBKj9x3m-Zk-rA4s-xFXnagC3vO8otXWOAH7qXYg47kx8D1qHVDpwHjD4WW8yd1jV_CYZlL5VWfrbbiVAdlwBDalB_UexT8emkhqTMjNwQMhIwMyqEXk8LcsfuI5IqgpdR488KovW9Z3ckMJjMbMWSpYOUfMuJ4_pRgYPMla9cm-h6QcP5PXIyhfTERUTRUyUAawcJAWC74R519UVe_gLizh0RqvKazWU0ISCjXVOmbH_bljBAwRIBZobMme9W3deBztAMd0asjKFJnjsviDKDgb1n5y8wS6z5nfNGWijNJbl2JwpVv9EVStbGM4OoqM-9st2MO5oVZJEK8PgtNp1LvuBr3Qkch_k2RXnSZJTfxs4aYZroTJTplZI2XEZS8bkK6Xlczod9rFAvsBdSK2G1A3rixmyBrTOkb7YE7Z8E5NRGWXx3mJns607eu00e69bzGlSe7kc_IpwN1wiYUtqWuRjABPqIhsV=w1046-h781-no\n","title":"rbenv、fish 與 VSCode 設置之路"},"__N_SSG":true}