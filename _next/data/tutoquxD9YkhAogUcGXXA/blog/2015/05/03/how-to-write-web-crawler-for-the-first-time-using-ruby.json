{"pageProps":{"content":"## 目標\n我們將會解析中正大學選課系統的選課資料，將它轉換成我們想要的格式 (JSON)，把它存起來。\n\n## 預先知識\n* 已經裝好 ruby 環境了\n* 如果是 OSX 記得把 Command Line Tool 裝起來\n\n<!--more-->\n\n## PART A:準備檔案\n```bash\n    $ mkdir ccu\n    $ cd ccu\n    $ touch Gemfile crawler.rb\n```\n\n建立專案資料夾及檔案，`Gemfile` 是 `Bundler` 用來管理 ruby 套件相依的工具，[沒有裝的先來裝個](http://bundler.io/)。\n\n接下來前往[中正大學課程網站](https://kiki.ccu.edu.tw/~ccmisp06/Course/)下載該學期的課程資料，網頁下方有一個 **開課資料壓縮檔下載** 的區塊，下載並解壓縮，放到我們的專案目錄底下。\n\n現在資料夾下檔案應該如下圖\n![step1.png](http://user-image.logdown.io/user/1128/blog/1112/post/243459/dbdLytaARcKx03aTMwJR_step1.png)\n\n\n## PART B:設置套件\n編輯 Gemfile 檔，設置這次中正課程爬蟲所需要的套件。加入以下兩行：\n\n```ruby\nsource 'https://rubygems.org'\n\ngem 'nokogiri'\ngem 'pry'\n```\n\n其中 `nokogiri` 是超常用，用來解析 HTML/XML 標簽語言結構的套件。\n它可以將你的 HTML 檔解析成 Nokogiri 的物件，方便查詢、篩選。\n\n[`pry`](http://pryrepl.org/) 你可以先把它想像成一個加強的 irb，附加上 syntax highlighting, plugin architecture, runtime invocation 等等強大的功能。我一般都用來 debug。\n\n寫完之後跑 bundle，安裝完這兩個套件\n\n```bash\nbundle\n```\n\n裝完長這樣\n![gemfile.png](http://user-image.logdown.io/user/1128/blog/1112/post/243459/hCNL1HqMSyGU5VFhGHNc_gemfile.png)\n\n## PART C:玩一下\n先觀察一下課程網頁的結構\n\n![table.png](http://user-image.logdown.io/user/1128/blog/1112/post/243459/RtVfu4fbTZq6hrl7nEUV_table.png)\n\n\n每個課程網頁裡面都有一張表格，表格每一列有我們需要的課程資料，我們要做的就是把每一格的資料從網頁中抓出來。\n\n打開 Chrome 開發人員工具，對表格中的其中一格選擇檢查元素，可以看到下面的結構\n\n![structure.png](http://user-image.logdown.io/user/1128/blog/1112/post/243459/J49HGBWgTKecrv9Fcz6R_structure.png)\n\n\n```html\n<table>\n  <tbody>\n    <tr>....</tr>\n    <tr>\n      <td>...</td>\n      <td>...</td>\n      ...\n    </tr>\n  </tbody>\n</table>\n```\n\n`<td>`標記中存的就是我們要的資料。它的結構是 table 包 tbody 包 tr 包 td。\n\n<hr/>\n\n稍微的來跟 pry 玩一下。\n\n打開 Terminal 確定我們在專案目錄下，啟動 pry 進度 interactive console 模式：\n\n![step2.png](http://user-image.logdown.io/user/1128/blog/1112/post/243459/uK7BV41mTQGR5lNaf3kn_step2.png)\n\n將任意一個課程網頁檔讀進來\n\n```ruby\nstr = File.read('1031/1014.html');\n```\n\n![step3.png](http://user-image.logdown.io/user/1128/blog/1112/post/243459/QSrjA3FsQuC389J9WPpi_step3.png)\n\n我在行末加上一個分號，這是讓 pry 不會預覽回傳值。當沒加的時候，就會預覽回傳值，也就是讀進來的 html\n\n![step3-1.png](http://user-image.logdown.io/user/1128/blog/1112/post/243459/Db5ei9I9TUugtynGB4PP_step3-1.png)\n\n在此界面下，j/k 上下捲動，d/u 捲動半頁，q 離開回到 console。\n\n再來載入 `nokogiri`，將剛剛讀取進來的 html 資料字串轉為 Nokogiri 物件，我們將物件存為 doc 變數：\n\n```ruby\nrequire 'nokogiri';\ndoc = Nokogiri::HTML(str);\n```\n\n![nokogiri.png](http://user-image.logdown.io/user/1128/blog/1112/post/243459/yRsJw8cxT7WOdnOnfqdx_nokogiri.png)\n\n<hr/>\n\n在此我們就進入爬蟲的精華了！(自己說)\n\n接下來我們將使用 CSS selector(選擇器) 語法，幫助我們從落落長的 html 文件中拿取我們要的資訊。\n\ncss selector 基本的規則分成幾個：\n\n* HTML tag selector\n* id selector\n* class selector\n* attribute selector\n\nhtml 長這樣\n\n```html\n<table class=\"hi\" id=\"table1\" width=\"500\"></table>>\n```\n\n也就是\n\n```html\n<tag class=\"class-value\" id=\"id-value\" attribute=\"attribute-value\"></tag>>\n```\n\n在使用 css selector 就會用\n\n```\ntable.hi#table1[width=\"500\"]\n```\n\n來選擇，選擇也可以是多層的，例如 ```<table><tr><td></td></tr></table>```就用\n\n```\ntable tr td\n```\n\n更多詳細精確的用法，請自行 Google。\n\n<hr/>\n\n繼續剛才的進度，我們把 Nokogiri 的物件存成了 doc，我們可以開始用這個物件下 css selector，例如\n\n```ruby\ndoc.css('table')\ndoc.css('table tr')\ndoc.css('table tr td')\n```\n\n可以分別試試看結果。\n\nNokogiri 在 select 時也可以是嵌套的，請記住，`.css('')`方法回傳是一個 nokogiri 物件的陣列，所以我們可以這樣用\n\n```ruby\ndoc.css('table').first.css('tr').first.css('td')\n```\n\n代表第一個 `table` 中的第一個 `tr`(table row)中的第一個 `td`(table data)\n\n## PART D:動工\n\n```ruby\nrequire 'nokogiri'\nrequire 'pry'\nrequire 'json'\n\ncourses = []\nDir.glob('1031/*.html').each do |filename|\n  str = File.read(filename)\n  doc = Nokogiri::HTML(str.encode(\"utf-8\", :invalid => :replace, :undef => :replace))\n\n  doc.css('table tr:not(:first-child)').each do |row|\n    datas = row.css('td')\n\n    courses << {\n      grade: datas[0] && datas[0].text,\n      serial: datas[1] && datas[1].text,\n      class_type: datas[2] && datas[2].text,\n      name: datas[3] && datas[3].text,\n      lecturer: datas[4] && datas[4].text,\n      credits: datas[6] && datas[6].text,\n      required_or_elective: datas[7] && datas[7].text,\n      time_location: datas[8] && datas[8].text,\n      type: datas[10] && datas[10].text,\n      outline: datas[11] && datas[11].css('a')[0] && datas[11].css('a')[0][:href],\n      note: datas[12] && datas[12].text\n    }\n  end\nend\n\nFile.open('courses.json', 'w') {|file| file.write(JSON.pretty_generate(courses))}\n\n```\n這是最終完成的[結果](https://github.com/colorgy/crawler-CCU-course)，實際上和我們剛才在 pry 裏試玩時差不了多少，一些函式如果不理解都可以 Google，有幾點注意。\n\n#### encode\n\n```ruby\nstr.encode(\"utf-8\", :invalid => :replace, :undef => :replace)\n```\n\n在這段我將檔案讀出的編碼去掉不合法和未定義的部分，否則在輸出成 JSON 時會出錯。\n\n#### 賦值\n\n```ruby\ndatas[2] && datas[2].text\n```\n\n先確定 data[2] 非 nil，再取用方法，比用 if 判斷 `data[2].nil?` 簡潔\n\n## Debug\n\n在你想要的斷點加入\n\n```ruby\nbinding.pry\n```\n\n一般來說我會在插入的該行下方再多加入一行無意義的輸出，例如：\n\n```ruby\nbinding.pry\nputs \"asdf\"\n```\n\n因為假如 binding.pry 的下一行是 end 或是方法結束，斷點會直接跳回上一層，很不方便。\n\n在斷點的地方你可以直接取用你所在區域的變數，以及可以用的方法，如此你可以邊寫邊確認你的程式碼是正確、或是你想要的，就不用在每次 print 出來啦！\n","title":"第十一篇 - 第一次自幹爬蟲就上手 - 使用 Ruby"},"__N_SSG":true}