{"pageProps":{"content":"不得不提，Logdown自動產生英文網址實在太猛了，不用反觀了沒一個能打的=w=\n\n今天花了一點時間嘗試實作最近 ~~SITCON~~ 很紅的遊戲[Threes!][1]以及各種衍生 ~~致敬~~ 版本（像[1024][2]啦、[2048][3]、[服貿2048](http://a0tim.github.io/)等等）。雖然一如往常的需要時間Debug，好說歹說也做出一個簡單的樣子了。其實只要搞懂規則，剩下來就看個人造化了。以下由規則切入演算法（大概），來吧。\n\n<!--more-->\n\n## 規則\n\n這幾個遊戲雖然看起來差不多，但規則上其實些微不同，以下便討論他們的不同：\n\n### 合併\n\n最開始讓人注意到的規則就是合併兩個方塊了。在 [_Threes!_][1] 裡面最基本的組合是`1 + 2 = 3`而在 [_1024_][2] , [_2048_][3] 等是由 2的1次方 開始，慢慢組合到 2的N次方。\n\n在方塊合併時其實是由滑動方向作為合併的判斷。我知道這句話說了跟放屁一樣沒啥用。好，來看例子：\n\n以下例子，三個3在同一列，此時往左推，將會造成：\n\n\t\t3 3 3 █  →  6 3 █ █\n\n而非\n\n\t\t3 3 3 █  →  3 6 █ █\n    \n這說明了在判斷合併時，是由左向右判讀，左邊開始第一個遇到能合併的就先併了：\n\n\t\t3+3 █ 3 █\n    \n再將最右邊的3抓過來：\n\n\t\t6 3 █ █\n    \n但如果是四個同樣的數字呢？這邊的處理方式 [_Threes!_][1] 和 [_2048_][3] 就不同了。\n\n[_Threes!_][1] 會左合併一次，變成：\n\n\t\t6 3 3 █\n    \n再次往左消才會變成\n\n\t\t6 6 █ █\n    \n而 [_2048_][3] 會接「消到底」：\n\t\t\n    \t2 2 2 2 → 4 4 █ █\n\n### 方塊移動\n\n這和上一個規則類似，在 [_Threes!_][1] 只會一次移動一格， [_2048_][3] 相當於「推到底」。\n\t\n### 隨機填補\n\n其實這個規則還是有些難猜，又還沒翻 [_2048_][3] 的原始碼，暫且不討論吧XD\n    \n## 實作\n知道以上的規則大概就寫的出來了。\n\n一直很不熟物件導向的我，嘗試將每個格子設為一個物件，運用類似，`Linklist`（感謝學長）的方法將每個格子串在一起，類似以下這種寫法：\n\n```c++\nclass Grid{\n\tGrid* right, left, up, down\n}\n```\n    \n這樣在寫合併時，只要從四邊出發，就能沿著路徑偵測合併的情況。\n\n      → → → →\n      → → → →\n      → → → →\n      → → → →\n      \n另外又設定了一個二維陣列來管理遊戲板(board)\n\n```c++\nGrid board[4][4]\n```\n\n實作移動、合併等內容。\n\n目前遊戲內容還沒啥營養，純文字介面而已，「有空」套上 [SDL](http://www.libsdl.org/)，再加強一下，唉。\n\n![螢幕擷圖存為 2014-03-29 21:20:44.png](http://user-image.logdown.io/user/1128/blog/1112/post/191665/RfwWbqoDSH21fl6E7isW_%E8%9E%A2%E5%B9%95%E6%93%B7%E5%9C%96%E5%AD%98%E7%82%BA%202014-03-29%2021:20:44.png)\n\n### [Github](https://github.com/Yukaii/my2048)\n\n[1]:https://itunes.apple.com/us/app/threes!/id779157948?mt=8&ign-mpt=uo%3D2\n[2]:https://itunes.apple.com/us/app/1024!/id823499224\n[3]:http://gabrielecirulli.github.io/2048/\n\n\n","title":"第二篇 - 嘗試實作Threes!/ 1024 /2048"},"__N_SSG":true}